% roughwork: classification function
% use to make plots later
n = 100;

% simulate chimera types to test 

% simulate death state
% Y = ones(n,1)*rand(1,n);

% simulate random
% Y = rand(n,n); 

% simulate sync / CSOD / amp_chim
Y = sin((1:n))'*ones(1,n);

% simulate CSOD
rnd = rand(1,n);
rnd =  find(rnd > 0.6);
for i =1:length(rnd)
    Y(:,rnd(i)) = zeros(n,1);
end

% % simulate amp_chim
% ran1 = randi([1 n/2],1);
% ran2 = randi([n/2 n],1);
% size = ran2 - ran1 + 1;
% eps = rand(2,size);
% for i = 1:length(eps)
%     Y(:, ran1 + i - 1) = eps(1,i) + eps(2,i).*Y(:, ran1 + i - 1);
% end

imagesc(Y)

function class = classify(Y)
% arg: matrix Y(t,x), t=time, x=node

    states = ["death","sync","amp_chim/chim","csod","chaos"];
    
    class = [];
    TOL = 1e-4;
    [M,N] = size(Y);
    stdvs = std(Y);
    
    if all(stdvs < TOL) % death state
        % check correlations between nodes
        class = state(1); % change to oscdeath and chimdeath later
        
    elseif range(stdvs) < TOL % sync state
        class = states(2);
        
    elseif any(stdvs < TOL) % remove nodes in death state
        Y = Y(:,find(stdvs > TOL));
        stdvs = std(Y);
        
        if range(stdvs) < TOL
            class = states(4); %CSOD
        else
            class = state(5); % amplitude chimera or chimera
        end
        
    elseif all(stdvs >= TOL)
        class = states(5);
        % check for chaos (Alec)
    end
end


% pseudocode:
% check if all in death or all in sync
% if not check if some in sync


